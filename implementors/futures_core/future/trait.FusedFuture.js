(function() {var implementors = {};
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; FusedFuture for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_core"] = [];
implementors["futures_intrusive"] = [{"text":"impl&lt;'a, MutexType, T&gt; FusedFuture for ChannelReceiveFuture&lt;'a, MutexType, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, MutexType, T&gt; FusedFuture for ChannelSendFuture&lt;'a, MutexType, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;MutexType, T&gt; FusedFuture for ChannelReceiveFuture&lt;MutexType, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;MutexType, T&gt; FusedFuture for ChannelSendFuture&lt;MutexType, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, MutexType, T:&nbsp;Clone&gt; FusedFuture for StateReceiveFuture&lt;'a, MutexType, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;MutexType, T&gt; FusedFuture for StateReceiveFuture&lt;MutexType, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, MutexType:&nbsp;RawMutex&gt; FusedFuture for GenericWaitForEventFuture&lt;'a, MutexType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, MutexType:&nbsp;RawMutex, T&gt; FusedFuture for GenericMutexLockFuture&lt;'a, MutexType, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, MutexType:&nbsp;RawMutex&gt; FusedFuture for GenericSemaphoreAcquireFuture&lt;'a, MutexType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FusedFuture for LocalTimerFuture&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FusedFuture for TimerFuture&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl&lt;IO:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; FusedFuture for Connect&lt;IO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;IO:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; FusedFuture for Accept&lt;IO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;IO:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; FusedFuture for FailableConnect&lt;IO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;IO:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; FusedFuture for FailableAccept&lt;IO&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()