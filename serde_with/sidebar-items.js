initSidebarItems({"attr":[["serde_as","Convenience macro to use the `serde_as` system."],["skip_serializing_none","Add `skip_serializing_if` annotations to [`Option`] fields."]],"derive":[["DeserializeFromStr","Deserialize value by using it's `FromStr` implementation"],["SerializeDisplay","Serialize value by using it's `Display` implementation"]],"macro":[["flattened_maybe","Support deserializing from flattened and non-flattened representation"],["with_prefix","Serialize with an added prefix on every field name and deserialize by trimming away the prefix."]],"mod":[["de","Module for [`DeserializeAs`][] implementations"],["formats","Specify the format and how lenient the deserialization is"],["rust","De/Serialization for Rust's builtin and std types"],["ser","Module for [`SerializeAs`][] implementations"]],"struct":[["As","Adapter to convert from `serde_as` to the serde traits."],["BytesOrString","Deserialize from bytes or string"],["CommaSeparator","Predefined separator using a single comma"],["DefaultOnError","Deserialize value and return [`Default`] on error"],["DefaultOnNull","Deserialize [`Default`] from `null` values"],["DisplayFromStr","De/Serialize using `Display` and `FromStr` implementation"],["DurationSeconds","De/Serialize Durations as number of seconds."],["DurationSecondsWithFrac","De/Serialize Durations as number of seconds."],["NoneAsEmptyString","De/Serialize a [`Option`]`<`[`String`]`>` type while transforming the empty string to [`None`]"],["Same","Adapter to convert from `serde_as` to the serde traits."],["SpaceSeparator","Predefined separator using a single space"],["StringWithSeparator","De/Serialize a delimited collection using [`Display`] and [`FromStr`] implementation"],["TimestampSeconds","De/Serialize timestamps as seconds since the UNIX epoch"],["TimestampSecondsWithFrac","De/Serialize timestamps as seconds since the UNIX epoch"]],"trait":[["DeserializeAs","A data structure that can be deserialized from any data format supported by Serde, analogue to [`Deserialize`]."],["Separator","Separator for string-based collection de/serialization"],["SerializeAs","A data structure that can be serialized into any data format supported by Serde, analogue to [`Serialize`]."]]});